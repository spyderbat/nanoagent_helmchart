
# Image location for Spyderbat Nano Agent
image:
  registry: public.ecr.aws
  repository: a6j2k0g1/nano-agent
  tag: latest
  pullPolicy: Always
  pullSecrets: []

# Enables Kubernetes meta data collection via a connection to the Kubernetes API server.
kubernetesSupport:
  enabled: true
  apiAuth: /var/run/secrets/kubernetes.io/serviceaccount/token
  apiUrl: "https://$(KUBERNETES_SERVICE_HOST)"


# Reasonable resource defaults.  May need to be larger on particularly large systems
resources:
  requests:
    cpu: 100m
    memory: 512Mi
  limits:
    cpu: 1000m
    memory: 2048Mi

# Priority class for Spyderbat Nano Agent.   An agent is desired on each node of the cluster
# Disabled by default to prevent doing harm.
priorityClassDefault:
  enabled: false
  name: default
  value: 1000

# Create a service account
serviceAccount:
  create: true
  name: spyderbat-serviceaccount
  annotations: { }
  role: cluster-admin
  
    
microK8sSnap: 
  enabled: false

# Cluster Name
CLUSTER_NAME: "none"

# Emit environment variables from collection: no, everything, or allbutredacted
# "no" tells Spyderbat to capture and analyze all environment variables from observed processes
# "everything" omits all environment variables
# "allbutredacted" uses a set of rules and omits everything but the envionrment variables that look like they contain secrets.  The secrets are encrypted.
OMITENVIRONMENT: "no"


# Spyderbat needs slightly more permissions to operate.  Specifically it needs the ability to use the bpf(.) syscall.  There are 2 ways to allow that.
# 1) a container can be privileged or 2) it can use CAP_SYS_ADMIN.   One of these must be true.
spyderbat_permissions:
  USE_PRIVILEGED: false
  USE_CAP_SYS_ADMIN: true

# Additional pod labels
podLabels: {}

nanoagent:
  pod:
    ## The annotations pods
    annotations: {}

  ## The node selector for pod assignments
  # nodeSelector: {}

  ## The tolerations of the pods
  tolerations: []

  ## The affinity of the pods
  affinity: {}
